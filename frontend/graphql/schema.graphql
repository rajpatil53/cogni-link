type Query {
  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  bioLinkIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): BioLinkConnection
  bioLinkCount: Int!
  commentIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CommentFiltersInput
    sorting: CommentSortingInput
  ): CommentConnection
  commentCount(filters: CommentFiltersInput): Int!
  commentableIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CommentableFiltersInput
    sorting: CommentableSortingInput
  ): CommentableConnection
  commentableCount(filters: CommentableFiltersInput): Int!
  profileIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ProfileConnection
  profileCount: Int!
  projectIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: ProjectFiltersInput
    sorting: ProjectSortingInput
  ): ProjectConnection
  projectCount(filters: ProjectFiltersInput): Int!
  votableIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VotableFiltersInput
    sorting: VotableSortingInput
  ): VotableConnection
  votableCount(filters: VotableFiltersInput): Int!
  voteIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VoteFiltersInput
    sorting: VoteSortingInput
  ): VoteConnection
  voteCount(filters: VoteFiltersInput): Int!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  bioLinkList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): BioLinkConnection
  bioLinkListCount: Int!
  commentList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CommentFiltersInput
    sorting: CommentSortingInput
  ): CommentConnection
  commentListCount(filters: CommentFiltersInput): Int!
  commentableList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CommentableFiltersInput
    sorting: CommentableSortingInput
  ): CommentableConnection
  commentableListCount(filters: CommentableFiltersInput): Int!
  profile: Profile
  projectList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: ProjectFiltersInput
    sorting: ProjectSortingInput
  ): ProjectConnection
  projectListCount(filters: ProjectFiltersInput): Int!
  votableList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VotableFiltersInput
    sorting: VotableSortingInput
  ): VotableConnection
  votableListCount(filters: VotableFiltersInput): Int!
  voteList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: VoteFiltersInput
    sorting: VoteSortingInput
  ): VoteConnection
  voteListCount(filters: VoteFiltersInput): Int!
}

"""A connection to a list of items."""
type BioLinkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BioLinkEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type BioLinkEdge {
  """The item at the end of the edge"""
  node: BioLink

  """A cursor for use in pagination"""
  cursor: String!
}

type BioLink implements Node {
  id: ID!
  data: String
  handle: String!
  network: String
  platform: String!
  profileID: CeramicStreamID!

  """Account controlling the document"""
  creator: CeramicAccount!
  profile: Profile

  """Current version of the document"""
  version: CeramicCommitID!
}

"""A Ceramic Stream ID"""
scalar CeramicStreamID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#streamid")

type Profile implements Node {
  id: ID!
  bio: String
  name: String!
  tags: [String]
  avatar: String
  wallets: [ProfileWallet]

  """Current version of the document"""
  version: CeramicCommitID!

  """Account controlling the document"""
  owner: CeramicAccount!
}

type ProfileWallet {
  chain: ProfileChainType
  address: String!
  primary: Boolean!
}

enum ProfileChainType {
  EVM
  SOLANA
  APTOS
  SUI
  ATOM
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://cips.ceramic.network/CIPs/cip-59#commitid")

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

type Comment implements Node {
  id: ID!
  body: String!
  edited: DateTime
  created: DateTime!
  subjectId: CeramicStreamID!

  """Account controlling the document"""
  owner: CeramicAccount!
  subject: Commentable
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Commentable implements Node {
  id: ID!
  created: DateTime!
}

input CommentFiltersInput {
  where: CommentObjectFilterInput
  and: [CommentFiltersInput!]
  or: [CommentFiltersInput!]
  not: CommentFiltersInput
}

input CommentObjectFilterInput {
  created: StringValueFilterInput
  subjectId: StringValueFilterInput
}

input StringValueFilterInput {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
}

input CommentSortingInput {
  created: SortOrder
  subjectId: SortOrder
}

enum SortOrder {
  ASC
  DESC
}

"""A connection to a list of items."""
type CommentableConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentableEdge]
}

"""An edge in a connection."""
type CommentableEdge {
  """The item at the end of the edge"""
  node: Commentable

  """A cursor for use in pagination"""
  cursor: String!
}

input CommentableFiltersInput {
  where: CommentableObjectFilterInput
  and: [CommentableFiltersInput!]
  or: [CommentableFiltersInput!]
  not: CommentableFiltersInput
}

input CommentableObjectFilterInput {
  created: StringValueFilterInput
}

input CommentableSortingInput {
  created: SortOrder
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge"""
  node: Project

  """A cursor for use in pagination"""
  cursor: String!
}

type Project implements Node & Votable & Commentable {
  id: ID!
  title: String!
  created: DateTime!
  updated: DateTime!
  coAuthors: [ID]
  description: String!
  votes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: VoteFiltersInput
    sorting: VoteSortingInput
  ): VoteConnection!

  """Account controlling the document"""
  author: CeramicAccount!
  comments(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int

    """Returns only documents created by the provided account"""
    account: ID
    filters: CommentFiltersInput
    sorting: CommentSortingInput
  ): CommentConnection!
  votesCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: VoteFiltersInput
  ): Int!
  commentsCount(
    """Counts only documents created by the provided account"""
    account: ID
    filters: CommentFiltersInput
  ): Int!
}

interface Votable implements Node {
  id: ID!
  created: DateTime!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge"""
  node: Vote

  """A cursor for use in pagination"""
  cursor: String!
}

type Vote implements Node {
  id: ID!
  type: VoteType
  created: DateTime!
  updated: DateTime!
  subjectId: CeramicStreamID!

  """Account controlling the document"""
  voter: CeramicAccount!
  subject: Votable
}

enum VoteType {
  UP_VOTE
  DOWN_VOTE
  NONE
}

input VoteFiltersInput {
  where: VoteObjectFilterInput
  and: [VoteFiltersInput!]
  or: [VoteFiltersInput!]
  not: VoteFiltersInput
}

input VoteObjectFilterInput {
  type: VoteTypeValueFilterInput
  subjectId: StringValueFilterInput
}

input VoteTypeValueFilterInput {
  isNull: Boolean
  equalTo: VoteType
  notEqualTo: VoteType
  in: [VoteType!]
  notIn: [VoteType!]
}

input VoteSortingInput {
  type: SortOrder
  subjectId: SortOrder
}

input ProjectFiltersInput {
  where: ProjectObjectFilterInput
  and: [ProjectFiltersInput!]
  or: [ProjectFiltersInput!]
  not: ProjectFiltersInput
}

input ProjectObjectFilterInput {
  created: StringValueFilterInput
}

input ProjectSortingInput {
  created: SortOrder
}

"""A connection to a list of items."""
type VotableConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VotableEdge]
}

"""An edge in a connection."""
type VotableEdge {
  """The item at the end of the edge"""
  node: Votable

  """A cursor for use in pagination"""
  cursor: String!
}

input VotableFiltersInput {
  where: VotableObjectFilterInput
  and: [VotableFiltersInput!]
  or: [VotableFiltersInput!]
  not: VotableFiltersInput
}

input VotableObjectFilterInput {
  created: StringValueFilterInput
}

input VotableSortingInput {
  created: SortOrder
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge"""
  node: Profile

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createBioLink(input: CreateBioLinkInput!): CreateBioLinkPayload
  updateBioLink(input: UpdateBioLinkInput!): UpdateBioLinkPayload
  enableIndexingBioLink(input: EnableIndexingBioLinkInput!): EnableIndexingBioLinkPayload
  createComment(input: CreateCommentInput!): CreateCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  enableIndexingComment(input: EnableIndexingCommentInput!): EnableIndexingCommentPayload
  setProfile(input: SetProfileInput!): SetProfilePayload
  createProfile(input: CreateProfileInput!): CreateProfilePayload @deprecated(reason: "Replaced by the setProfile mutation, createProfile will be removed in a future version of ComposeDB.")
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  enableIndexingProfile(input: EnableIndexingProfileInput!): EnableIndexingProfilePayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  enableIndexingProject(input: EnableIndexingProjectInput!): EnableIndexingProjectPayload
  createVote(input: CreateVoteInput!): CreateVotePayload
  updateVote(input: UpdateVoteInput!): UpdateVotePayload
  enableIndexingVote(input: EnableIndexingVoteInput!): EnableIndexingVotePayload
}

type CreateBioLinkPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: BioLink!
  clientMutationId: String
}

input CreateBioLinkInput {
  content: BioLinkInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input BioLinkInput {
  data: String
  handle: String!
  network: String
  platform: String!
  profileID: CeramicStreamID!
}

input CreateOptionsInput {
  """Inform indexers if they should index this document or not"""
  shouldIndex: Boolean
}

type UpdateBioLinkPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: BioLink!
  clientMutationId: String
}

input UpdateBioLinkInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialBioLinkInput!
  clientMutationId: String
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Inform indexers if they should index this document or not"""
  shouldIndex: Boolean

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

input PartialBioLinkInput {
  data: String
  handle: String
  network: String
  platform: String
  profileID: CeramicStreamID
}

type EnableIndexingBioLinkPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: BioLink
  clientMutationId: String
}

input EnableIndexingBioLinkInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type CreateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input CreateCommentInput {
  content: CommentInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input CommentInput {
  body: String!
  edited: DateTime
  created: DateTime!
  subjectId: CeramicStreamID!
}

type UpdateCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment!
  clientMutationId: String
}

input UpdateCommentInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialCommentInput!
  clientMutationId: String
}

input PartialCommentInput {
  body: String
  edited: DateTime
  created: DateTime
  subjectId: CeramicStreamID
}

type EnableIndexingCommentPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Comment
  clientMutationId: String
}

input EnableIndexingCommentInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type SetProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

input SetProfileInput {
  content: ProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

input ProfileInput {
  bio: String
  name: String!
  tags: [String]
  avatar: String
  wallets: [ProfileWalletInput]
}

input ProfileWalletInput {
  chain: ProfileChainType
  address: String!
  primary: Boolean!
}

input SetOptionsInput {
  """Inform indexers if they should index this document or not"""
  shouldIndex: Boolean

  """
  Maximum amount of time to lookup the stream over the network, in seconds - see https://developers.ceramic.network/reference/typescript/interfaces/_ceramicnetwork_common.CreateOpts.html#syncTimeoutSeconds
  """
  syncTimeout: Int
}

type CreateProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

input CreateProfileInput {
  content: ProfileInput!
  options: SetOptionsInput
  clientMutationId: String
}

type UpdateProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile!
  clientMutationId: String
}

input UpdateProfileInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialProfileInput!
  clientMutationId: String
}

input PartialProfileInput {
  bio: String
  name: String
  tags: [String]
  avatar: String
  wallets: [ProfileWalletInput]
}

type EnableIndexingProfilePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Profile
  clientMutationId: String
}

input EnableIndexingProfileInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type CreateProjectPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Project!
  clientMutationId: String
}

input CreateProjectInput {
  content: ProjectInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input ProjectInput {
  title: String!
  created: DateTime!
  updated: DateTime!
  coAuthors: [ID]
  description: String!
}

type UpdateProjectPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Project!
  clientMutationId: String
}

input UpdateProjectInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialProjectInput!
  clientMutationId: String
}

input PartialProjectInput {
  title: String
  created: DateTime
  updated: DateTime
  coAuthors: [ID]
  description: String
}

type EnableIndexingProjectPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Project
  clientMutationId: String
}

input EnableIndexingProjectInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}

type CreateVotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Vote!
  clientMutationId: String
}

input CreateVoteInput {
  content: VoteInput!
  options: CreateOptionsInput
  clientMutationId: String
}

input VoteInput {
  type: VoteType
  created: DateTime!
  updated: DateTime!
  subjectId: CeramicStreamID!
}

type UpdateVotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Vote!
  clientMutationId: String
}

input UpdateVoteInput {
  id: ID!
  options: UpdateOptionsInput
  content: PartialVoteInput!
  clientMutationId: String
}

input PartialVoteInput {
  type: VoteType
  created: DateTime
  updated: DateTime
  subjectId: CeramicStreamID
}

type EnableIndexingVotePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Vote
  clientMutationId: String
}

input EnableIndexingVoteInput {
  id: ID!
  shouldIndex: Boolean!
  clientMutationId: String
}